the given amount
	offset: function(dx, dy) {
		if (wxtools.MapPane_debug) wxtools.log('Point.offset(' + dx + ',' + dy + ')');
		
		this.x += dx;
		this.y += dy;
	},
	// are these the same point?
	equals: function(toCompare) {
		if (wxtools.MapPane_debug) wxtools.log('Point.equals(' + toCompare + ')');
		
		return (toCompare.x == this.x) && (toCompare.y == this.y);
	},
	// make a new point this-v
	decrement: function(v) {
		if (wxtools.MapPane_debug) wxtools.log('Point.decrement(' + v + ')');
		
		return new MapPane_Point(this.x - v.x, this.y - v.y);
	},
	// make a new point this+v
	increment: function(v) {
		if (wxtools.MapPane_debug) wxtools.log('Point.increment(' + v + ')');
		
		return new MapPane_Point(this.x + v.x, this.y + v.y);
	},
	// eye-friendly description of the point
	toString: function() {
		if (wxtools.MapPane_debug) wxtools.log('Point.toString()');
		
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
};










/**
 * MapPane_MercatorProjection
 * this class handles all conversions between lat/long and the equivalent x/y coordinates
 *  for a Mercator projection with the defined contants
 */
wxtools.MapPane_MercatorProjection = function(width, height, minXY, maxXY) {
	if (wxtools.MapPane_debug) wxtools.log('MercatorProjection(' + width + ',' + height + ',' + minXY + ',' + maxXY + ')');
	
	this.width = width;
	th